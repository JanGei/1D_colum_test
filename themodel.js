    (function() {
          const fn = function() {
            Bokeh.safely(function() {
              (function(root) {
                function embed_document(root) {
                  
                const docs_json = '{"b7fcd423-4c0a-4fee-abc0-82de3eacd5e6":{"defs":[],"roots":{"references":[{"attributes":{"args":{"BTCp":{"id":"1077"},"Fr_n_sl":{"id":"1145"},"K_Fr_sl":{"id":"1143"},"Kads_sl":{"id":"1139"},"Kd_sl":{"id":"1137"},"Lcube1":[[0.7128630517314434],[0.40984055945410186],[0.8248990677972113],[0.020709229699792154],[0.3271800589970052],[0.4673137058909625],[0.5806300128481464],[0.8078207460503772],[0.9037475793290642],[0.7661726575027515],[0.5938200753412406],[0.032103184821124835],[0.6800352589282689],[0.5568456856637818],[0.1871926825358513],[0.47197930845420805],[0.128827819727258],[0.2331572825239168],[0.2723973874165711],[0.8841764181134292],[0.3309257307671286],[0.5339717703460386],[0.3720422584783977],[0.8662242625770399],[0.7972865118739834],[0.003940832883661329],[0.9490013788781],[0.2696150821984278],[0.19316822473922723],[0.36509341172114906],[0.665775481466159],[0.04161094633864005],[0.488251666207345],[0.45253033081542576],[0.15598611680337263],[0.7428177693581887],[0.9696223299288369],[0.87754968325538],[0.010965540291315357],[0.6946990659349482],[0.16653675963302533],[0.25778352014668554],[0.778970123218958],[0.1022202068939117],[0.6540198093332265],[0.17913779252592665],[0.4469946031988421],[0.8577536768664096],[0.996674800714412],[0.6237313724689394],[0.3156747460445792],[0.35066239737280575],[0.3802387872980954],[0.7277625555197562],[0.6396317631268971],[0.832503975670297],[0.2864449142118784],[0.6749648316560726],[0.24823264406047815],[0.14949595250903994],[0.4960866365570567],[0.06379393111122131],[0.20756670047950934],[0.5042251765217457],[0.8429386840387774],[0.435348880924412],[0.9154332633687615],[0.7049206886092402],[0.7868451313014976],[0.30363763660246146],[0.7319444417320927],[0.9797901816319624],[0.5668062694970414],[0.3461328492609878],[0.21515720025144566],[0.09915386486550905],[0.5286645519393381],[0.8131307588488204],[0.22791891800493527],[0.9322278892334102],[0.6193339190415947],[0.08835739141883332],[0.41823816986694273],[0.6053084915715286],[0.5452051017399091],[0.11177141906170529],[0.7558257544554308],[0.4269464398249625],[0.13779372117073851],[0.8939524906868712],[0.5108034134887569],[0.5701682728632093],[0.9253207893037271],[0.05130567047126604],[0.6408574668503598],[0.29489421371122204],[0.9505224896344813],[0.07554532488963601],[0.9861508161272075],[0.39204487354873846]],"Lcube2":[[0.16533525877276226],[0.6099917625957094],[0.11467135828533799],[0.918200805249346],[0.31134197105509565],[0.24354334709289735],[0.8365795441240182],[0.9762057339987099],[0.8886292669889784],[0.07421066722726521],[0.5548785664713076],[0.6255304125438331],[0.9340268101122825],[0.427932964001006],[0.9075997483821154],[0.19285560540604846],[0.8265425583292146],[0.7077042644794875],[0.8156029427293605],[0.7442531668784588],[0.7745732093343551],[0.020800263489466096],[0.9678511856164645],[0.6545999520191849],[0.9213312946022636],[0.053347838827886226],[0.40713792126816367],[0.5339257624626529],[0.8401179153201478],[0.2247478817487772],[0.3241290594404824],[0.954154570827874],[0.7699098786325774],[0.7931848080266439],[0.5448007249149288],[0.520796167179747],[0.6310371687063396],[0.2545553088756648],[0.08388132864808602],[0.1556607581620821],[0.6412707117542954],[0.20010397240411454],[0.26643116534647665],[0.2714850475857255],[0.3978187045858146],[0.14050962088426774],[0.6905603160838458],[0.5791374138847473],[0.45211737377245526],[0.3330173201312667],[0.9468652508696656],[0.3852985839776216],[0.7818617911319785],[0.47056571701338834],[0.8949197128551674],[0.12559161798403273],[0.7143306323983037],[0.3758630769607835],[0.7331209920193532],[0.18765894887725004],[0.861486631670815],[0.5878753966702327],[0.41385006206304936],[0.4896309137623772],[0.3486536709259612],[0.09298827299591304],[0.17223254313661673],[0.5058781884476168],[0.007471865370151714],[0.36712683191557544],[0.5903638504443849],[0.011579153838776049],[0.663816601263715],[0.1300976438462803],[0.235443023905652],[0.687840062802731],[0.06570948038676916],[0.49482741992043555],[0.44322965880236814],[0.7218309223128857],[0.28692321470435506],[0.5614295053702305],[0.9915301438249826],[0.8558736227566363],[0.3062701857832178],[0.875877314471081],[0.43549895391882276],[0.03400224964160507],[0.290753142063431],[0.758875673970726],[0.0453951396956688],[0.8005535545829473],[0.6101107384787808],[0.21372448130611857],[0.10350287200227015],[0.46585731518110207],[0.3505221846921829],[0.9838081656524298],[0.6776885646021624],[0.518248868152364]],"col_len_sl":{"id":"1123"},"col_rad_sl":{"id":"1125"},"computebutton":{"id":"1149"},"disp_sl":{"id":"1127"},"flow_sl":{"id":"1131"},"pore_vol_sl":{"id":"1119"},"poros_sl":{"id":"1133"},"pulse_inj_sl":{"id":"1121"},"reac_sl":{"id":"1129"},"rg_AN":{"id":"1146"},"rg_CP":{"id":"1147"},"rg_ST":{"id":"1148"},"rho_s_sl":{"id":"1135"},"s_max_sl":{"id":"1141"},"source1":{"id":"1002"},"source2":{"id":"1003"},"source3":{"id":"1004"}},"code":"function getc(x,vel,t,Lcube1,Lcube2,reac_l,reac_h,disp_l,disp_h,t_inj,rg) {\\n  var c = []\\n  var cmin = []\\n  var cmax = []\\n  var r_mean = (reac_l+reac_h)/2\\n  var D_mean = (disp_l+disp_h)/2\\n  var gam_mean = get_gamma(r_mean,D_mean,vel)\\n  for (let i = 0; i &lt; x.length; i++) { \\n      if (x[i] &lt;= 0) {\\n        c[i] = 1\\n        cmin[i] = 1\\n        cmax[i] = 1\\n      } else {\\n        var intlist = []\\n          for (let j = 0; j &lt; Lcube1.length; j++) {\\n            var r_intermed = reac_l + (reac_h-reac_l)*Lcube1[j]\\n            var D_intermed = disp_l + (disp_h-disp_l)*Lcube2[j]\\n            var gam_intermed = get_gamma(r_intermed,D_intermed,vel)\\n            if (rg == 1) {\\n              // Pulse injection\\n              if (t&lt;t_inj) {\\n                intlist[j] = 1/2 * (1-math.erf((x[i]-vel*t) / math.sqrt(4*D_intermed*t)))\\n              } else {\\n                intlist[j] = 1/2 * ((1-math.erf((x[i]-vel*t) / math.sqrt(4*D_intermed*t)))-(1-math.erf((x[i]-vel*(t-t_inj))/math.sqrt(4*D_intermed*(t-t_inj)))));\\n              }\\n            } else {\\n              // Cotinuous injection\\n              intlist[j] = 1/2 * Math.exp(x[i]*vel/(2*D_intermed))*(Math.exp((-x[i])*vel*gam_intermed/(2*D_intermed))*(1-math.erf((x[i]-vel*t*gam_intermed)/math.sqrt(4*D_intermed*t)))+math.exp(x[i]*vel*gam_intermed/(2*D_intermed))*(1-math.erf((x[i]+vel*t*gam_intermed)/math.sqrt(4*D_intermed*t))));\\n            }\\n          }\\n        // Main line with mean values of dispersion and reaction\\n        if (rg==1){\\n          // Pulse injection\\n          if (t&lt;t_inj) {\\n            c[i] = 1/2 * (1-math.erf((x[i]-vel*t) / math.sqrt(4*D_mean*t)))\\n          } else {\\n            c[i] = 1/2 * ((1-math.erf((x[i]-vel*t) / math.sqrt(4*D_mean*t)))-(1-math.erf((x[i]-vel*(t-t_inj))/math.sqrt(4*D_mean*(t-t_inj)))));\\n          }\\n        } else {\\n          // Continuous injection\\n          c[i] = 1/2 * Math.exp(x[i]*vel/(2*D_mean))*(Math.exp((-x[i])*vel*gam_mean/(2*D_mean))*(1-math.erf((x[i]-vel*t*gam_mean)/math.sqrt(4*D_mean*t)))+math.exp(x[i]*vel*gam_mean/(2*D_mean))*(1-math.erf((x[i]+vel*t*gam_mean)/math.sqrt(4*D_mean*t))));\\n        }\\n        cmin[i] = math.min(intlist)\\n        cmax[i] = math.max(intlist)\\n    }\\n  }\\n  return [c, cmin, cmax]\\n}\\n\\n// console.log() is accessable through F12\\n\\n\\nfunction getc_BTC(xBTC,vel,tsp,gam,t_inj,D) {\\n  const c = []\\n  for (let i = 0; i &lt; tsp.length; i++) {\\n      if (rg_CP==1){\\n        // Pulse injection |this produces negative values in the begining\\n        if (tsp[i]&lt;t_inj) {\\n          c[i] = 1/2 * (1-math.erf((xBTC-vel*tsp[i]) / math.sqrt(4*D*tsp[i])))\\n        } else {\\n          c[i] = 1/2 * ((1-math.erf((xBTC-vel*tsp[i]) / math.sqrt(4*D*tsp[i])))-(1-math.erf((xBTC-vel*(tsp[i]-t_inj))/math.sqrt(4*D*(tsp[i]-t_inj)))));\\n        }\\n      } else {\\n        // Continuous injection\\n        c[i] = 1/2 * Math.exp(xBTC*vel/(2*D))*(Math.exp((-xBTC)*vel*gam/(2*D))*(1-math.erf((xBTC-vel*tsp[i]*gam)/math.sqrt(4*D*tsp[i])))+math.exp(xBTC*vel*gam/(2*D))*(1-math.erf((xBTC+vel*tsp[i]*gam)/math.sqrt(4*D*tsp[i]))));\\n        }\\n  }\\n  return c\\n}\\n\\nfunction get_gamma(reac,Dis,sep_vel) {\\n  var res = []\\n  res = Math.sqrt(1 + 4 * reac * Dis / sep_vel**2)\\n  return res\\n}\\n\\n// Extracting data sources\\nvar x   = source1.data[&#x27;x&#x27;] \\nvar y   = source1.data[&#x27;y&#x27;]\\nvar ymin= source1.data[&#x27;ymin&#x27;]\\nvar ymax= source1.data[&#x27;ymax&#x27;]\\nvar x2  = source2.data[&#x27;x2&#x27;]\\nvar y2  = source2.data[&#x27;y2&#x27;]\\nvar x3  = source3.data[&#x27;xBTC&#x27;]\\nvar y3  = source3.data[&#x27;yBTC&#x27;]\\n\\nvar rg_AN     = rg_AN.active                      // [0]\\nvar rg_CP     = rg_CP.active                      // [0]\\nvar rg_SType  = rg_ST.active                      // [0]\\n\\n// Values needed for all models\\nconst col_len   = col_len_sl.value;                 // [m]\\nconst rad       = col_rad_sl.value;                 // [m]\\nconst reac_l    = Math.exp(reac_sl.value[0])/3600;  // [1/s]\\nconst reac_h    = Math.exp(reac_sl.value[1])/3600;  // [1/s]\\nconst disp_l    = Math.exp(disp_sl.value[0])/3600;  // [m2/s]\\nconst disp_h    = Math.exp(disp_sl.value[1])/3600;  // [m2/s]\\nconst Q         = flow_sl.value/1000/1000/3600;     // [m3/s]\\nconst n         = poros_sl.value;                   // [-]\\nconst t_inj     = pulse_inj_sl.value                // [s]\\nvar xBTC        = x3[0];                            // [m]\\n\\n// Derived entities\\nconst A       = math.PI * rad**2;             // [m2]\\nconst vel     = Q/A;                          // [m/s]\\nconst sep_vel = vel / n                       // [m/s]\\nconst reac    = (reac_l + reac_h)/2           // [1/s] \\nconst Dis     = (disp_l + disp_h)/2           // [m2/s]  \\nconst PS      = col_len * A * n               // [m3]\\nconst PV      = col_len/sep_vel               // [s] VEL oder SEP_VEL?\\nconst c0      = 1;                            // [-] \\n\\n// Time span list\\nvar tsp = []\\n\\n// Discretize space (upper plot) and time (lower plot)\\nfor (let j = 0; j &lt; x.length; j++) {\\n  x[j] = -0.02*col_len + 1.02*col_len/x.length * j;\\n}\\nfor (let j = 0; j &lt; x2.length; j++) {\\n  tsp[j] = x2[j] * PV;\\n}\\n\\n// Fix point draw tool to x-axis and limit its range on x-axis\\ny3[0] = 0\\nif (x3[0]&lt;=0.001) {\\n  x3[0] = 0.01\\n} else if (x3[0] &gt; col_len) {\\n  x3[0] = col_len\\n}\\n\\nif (rg_AN == 0){ // Analytical model\\n\\n  // Time for analytical model \\n  const tPV       = Math.exp(pore_vol_sl.value);      // [-]\\n  const t         = tPV * PV                          // [s]\\n\\n  const gam     = Math.sqrt(1 + 4 * reac * Dis / sep_vel**2) \\n\\n  // Initializing empty lists\\n  var c = []\\n  var cmin = []\\n  var cmax = []\\n  var cBTX = []\\n\\n  // This if statement has no meaning besides preventing a Type Error &lt;-- why is that? It doesnt work without it\\n  if (1&lt;2){ \\n    [c, cmin, cmax] = getc(x,sep_vel,t,Lcube1,Lcube2,reac_l,reac_h,disp_l,disp_h,t_inj,rg_CP)\\n    cBTX = getc_BTC(xBTC,sep_vel,tsp,gam,t_inj,Dis) \\n  }\\n\\n  // Update sources\\n  for (let i = 0; i &lt; c.length; i++) {\\n    y[i] = c[i]\\n    ymin[i] = cmin[i]\\n    ymax[i] = cmax[i]\\n  }\\n  for (let i = 0; i &lt; x.length; i++) {\\n    y2[i] = cBTX[i]\\n  }\\n\\n  // Update Sliders\\n  pore_vol_sl.title = &#x27;Pore Volume (1PV =&#x27; + (PV/3600).toFixed(2) +&#x27;h)&#x27;;\\n  BTCp.title.text   = &#x27;Breakthrough Curve at x = &#x27; + xBTC.toFixed(3) + &#x27; m (Drag diamond in upper plot to change)&#x27;\\n  rg_ST.visible = false\\n  computebutton.visible = false\\n  rho_s_sl.visible = false\\n  Kd_sl.visible = false\\n  Kads_sl.visible = false\\n  s_max_sl.visible = false\\n  K_Fr_sl.visible = false\\n  Fr_n_sl.visible = false\\n\\n  if (rg_CP==0) {\\n    pulse_inj_sl.visible = false\\n  } else {\\n    pulse_inj_sl.visible = true\\n  }\\n\\n} else {\\n  // Change UI for numerical model -- Computation is preformed in different fiel\\n  // Make sorption type options visible\\n  rg_ST.visible = true\\n  computebutton.visible = true\\n  if (rg_SType == 0) {\\n    rho_s_sl.visible = true\\n    Kd_sl.visible = true\\n    Kads_sl.visible = false\\n    s_max_sl.visible = false\\n    K_Fr_sl.visible = false\\n    Fr_n_sl.visible = false\\n  } else if (rg_SType == 1) {\\n    rho_s_sl.visible = false\\n    Kd_sl.visible = false\\n    Kads_sl.visible = true\\n    s_max_sl.visible = true\\n    K_Fr_sl.visible = false\\n    Fr_n_sl.visible = false\\n  } else if (rg_SType == 2) {\\n    rho_s_sl.visible = false\\n    Kd_sl.visible = false\\n    Kads_sl.visible = false\\n    s_max_sl.visible = false\\n    K_Fr_sl.visible = true\\n    Fr_n_sl.visible = true\\n  }\\n  \\n}\\n\\n\\n//console.log((xBTC-sep_vel*tsp[100]*gam)/math.sqrt(4*Dis*tsp[100]))\\n//console.log(tsp[100])\\n//console.log(sep_vel)\\n//console.log(Dis)\\n\\nsource1.change.emit();\\nsource2.change.emit();"},"id":"1151","type":"CustomJS"},{"attributes":{"data":{"x2":{"__ndarray__":"/anx0k1iUD9d5VN4/ISiP7UeCEFzQ7I/vErmRWhEuz9hO2KlriLCP2RR0Scpo8Y/aGdAqqMjyz9rfa8sHqTPP7dJj1dMEtI/udTGmIlS1D+6X/7ZxpLWP7zqNRsE09g/vnVtXEET2z+/AKWdflPdP8GL3N67k98/YQsKkPzp4D/i0KUwGwriP2OWQdE5KuM/5FvdcVhK5D9kIXkSd2rlP+XmFLOViuY/ZqywU7Sq5z/ncUz00sroP2g36JTx6uk/6fyDNRAL6z9pwh/WLivsP+qHu3ZNS+0/a01XF2xr7j/sEvO3iovvPzZsR6zUVfA/9k6V/OPl8D+3MeNM83XxP3cUMZ0CBvI/N/d+7RGW8j/42cw9ISbzP7i8Go4wtvM/eZ9o3j9G9D85grYuT9b0P/lkBH9eZvU/ukdSz2329T96KqAffYb2PzsN7m+MFvc/++87wJum9z+70okQqzb4P3y112C6xvg/PJglsclW+T/9enMB2eb5P71dwVHodvo/fkAPovcG+z8+I13yBpf7P/4Fq0IWJ/w/v+j4kiW3/D9/y0bjNEf9P0CulDNE1/0/AJHig1Nn/j/AczDUYvf+P4FWfiRyh/8/oRxmusALAEABDo1iyFMAQGH/swrQmwBAwfDastfjAEAh4gFb3ysBQILTKAPncwFA4sRPq+67AUBCtnZT9gMCQKKnnfv9SwJAApnEowWUAkBjiutLDdwCQMN7EvQUJANAI205nBxsA0CDXmBEJLQDQONPh+wr/ANAREGulDNEBECkMtU8O4wEQAQk/ORC1ARAZBUjjUocBUDEBko1UmQFQCX4cN1ZrAVAhemXhWH0BUDl2r4taTwGQEXM5dVwhAZApb0MfnjMBkAGrzMmgBQHQGagWs6HXAdAxpGBdo+kB0Amg6gel+wHQIZ0z8aeNAhA52X2bqZ8CEBHVx0XrsQIQKdIRL+1DAlABzprZ71UCUBnK5IPxZwJQMgcubfM5AlAKA7gX9QsCkCI/wYI3HQKQOjwLbDjvApASeJUWOsEC0Cp03sA80wLQAnFoqj6lAtAabbJUALdC0DJp/D4CSUMQCqZF6ERbQxAioo+SRm1DEDqe2XxIP0MQEptjJkoRQ1Aql6zQTCNDUALUNrpN9UNQGtBAZI/HQ5AyzIoOkdlDkArJE/iTq0OQIsVdopW9Q5A7AadMl49D0BM+MPaZYUPQKzp6oJtzQ9Ah+2IlboKEEA3Zpxpvi4QQOferz3CUhBAl1fDEcZ2EEBH0NblyZoQQPdI6rnNvhBAp8H9jdHiEEBXOhFi1QYRQAezJDbZKhFAtys4Ct1OEUBopEve4HIRQBgdX7LklhFAyJVyhui6EUB4DoZa7N4RQCiHmS7wAhJA2P+sAvQmEkCIeMDW90oSQDjx06r7bhJA6Gnnfv+SEkCZ4vpSA7cSQElbDicH2xJA+dMh+wr/EkCpTDXPDiMTQFnFSKMSRxNACT5cdxZrE0C5tm9LGo8TQGkvgx8esxNAGaiW8yHXE0DJIKrHJfsTQHqZvZspHxRAKhLRby1DFEDaiuRDMWcUQIoD+Bc1ixRAOnwL7DivFEDq9B7APNMUQJptMpRA9xRASuZFaEQbFUD6Xlk8SD8VQKrXbBBMYxVAW1CA5E+HFUALyZO4U6sVQLtBp4xXzxVAa7q6YFvzFUAbM840XxcWQMur4QhjOxZAeyT13GZfFkArnQixaoMWQNsVHIVupxZAi44vWXLLFkA8B0Mtdu8WQOx/VgF6ExdAnPhp1X03F0BMcX2pgVsXQPzpkH2FfxdArGKkUYmjF0Bc27cljccXQAxUy/mQ6xdAvMzezZQPGEBsRfKhmDMYQB2+BXacVxhAzTYZSqB7GEB9rywepJ8YQC0oQPKnwxhA3aBTxqvnGECNGWearwsZQD2Sem6zLxlA7QqOQrdTGUCdg6EWu3cZQE38tOq+mxlA/nTIvsK/GUCu7duSxuMZQF5m72bKBxpADt8CO84rGkC+VxYP0k8aQG7QKePVcxpAHkk9t9mXGkDOwVCL3bsaQH46ZF/h3xpAL7N3M+UDG0DfK4sH6ScbQI+kntvsSxtAPx2yr/BvG0DvlcWD9JMbQJ8O2Vf4txtAT4fsK/zbG0D///////8bQA==","dtype":"float64","order":"little","shape":[200]},"y2":{"__ndarray__":"AAAAAAAAAACMVwXXNZBzPSFi7JesUsU+wrox0ZvFNz82nBZ5+ZlxP0Vwf5RdApM/zY2j+tCyqD/f8azjj/m3P2wW63K8ZMM/foMra+DKyz/7/3aHdk3SP3EafvbcrtY/JIqQpWDf2j8VR49qXcTeP6U8NEXFJ+E/yUFXq8294j8KxpPzrSTkP0Rl++q4XuU/dHrOpFtv5j/ioVOailrnP9kmeJpfJOg/r8VVetvQ6D9Dj30OwWPpP6XaWHuB4Ok/SxyQDDRK6j+B77xvlaPqP6Mns3AL7+o/LlbcQKsu6z+9jT/7QGTrP5PI5IxXkes/QCjjekC36z/ZPOw2G9frP7HxN9jb8es/C+znJlEI7D/pGE33KRvsPyvrw9v5Kuw/B2EYOT047D/0avTLXEPsP+PYta6wTOw/1RXT7oJU7D+Y/x/AEVvsP/efGFuRYOw/UPoGki1l7D99NoInC2nsP17Oeu9IbOw/cZDTwgBv7D+NgW9MSHHsPya4orUxc+w/muQXN8x07D9jyHuSJHbsPz4kmXhFd+w/kxYA3zd47D8X5thHA3nsPwZDGf6teew/+sr5Rz167D+d6z2RtXrsPxg3oI4ae+w//Cd/W2977D/hubiStnvsP+XWfGPye+w/xE++oiR87D/Z8c7ZTnzsP46GnFJyfOw/AmrxIZB87D9tXwswqXzsP5zZzT++fOw/ZazJ9M987D/grErY3nzsPwXhk13rfOw/KkJs5fV87D9bjBjB/nzsP5Ly2TQGfew/Rq4Fegx97D/vIcbAEX3sP/iNkzEWfew/hBFw7hl97D/XyPATHX3sP+pCHLoffew/dTIl9SF97D9AIAfWI33sP3z1CWslfew//GswwCZ97D9uypTfJ33sP/LFttEofew/dOy8nSl97D/BmKtJKn3sP0Uek9oqfew/KJW2VCt97D+Hday7K33sP4n/eRIsfew/jEWqWyx97D8ai2GZLH3sP8+Obc0sfew/TT1T+Sx97D/aNloeLX3sP8mAlj0tfew/Bq3wVy197D+/tixuLX3sP6PI74Atfew/EhnFkC197D9yASKeLX3sP9Jvaaktfew/S83usi197D8Zb/i6LX3sPwulwcEtfew/7nR8xy197D8GEFPMLX3sP7sNadAtfew/wHTc0y197D9mmsbWLX3sP/XePNktfew/TUxR2y197D+tGxPdLX3sP28mj94tfew/HUXQ3y197D+Zn9/gLX3sP67wxOEtfew/Gr+G4i197D+cjSrjLX3sP4cDteMtfew/9Q4q5C197D+oAY3kLX3sP1+p4OQtfew/amQn5S197D/+MmPlLX3sP9zFleUtfew/pYrA5S197D9RtuTlLX3sP/RNA+Ytfew/Ni4d5i197D+UETPmLX3sP6+VReYtfew/wj9V5i197D9xgGLmLX3sP/e2beYtfew/1DN35i197D8bO3/mLX3sP1wGhuYtfew/RcaL5i197D8ApJDmLX3sP1vClOYtfew/yz6Y5i197D84MpvmLX3sP7SxneYtfew/EM+f5i197D9hmaHmLX3sP2wdo+Ytfew/+GWk5i197D8rfKXmLX3sP71npuYtfew/OS+n5i197D8q2KfmLX3sPz1nqOYtfew/auCo5i197D8NR6nmLX3sP/udqeYtfew/n+ep5i197D//JarmLX3sP9haquYtfew/nIeq5i197D+LrarmLX3sP67NquYtfew/5+iq5i197D/6/6rmLX3sP4cTq+Ytfew/FySr5i197D8hMqvmLX3sPwg+q+Ytfew/HUir5i197D+pUKvmLX3sP+hXq+Ytfew/C16r5i197D8/Y6vmLX3sP6hnq+Ytfew/Zmur5i197D+RbqvmLX3sP0Fxq+Ytfew/iXOr5i197D94davmLX3sPxt3q+Ytfew/fnir5i197D+reavmLX3sP6p6q+Ytfew/g3ur5i197D88fKvmLX3sP9h8q+Ytfew/XH2r5i197D/NfavmLX3sPyx+q+Ytfew/fH6r5i197D/AfqvmLX3sP/t+q+Ytfew/LH+r5i197D9Wf6vmLX3sP3l/q+Ytfew/l3+r5i197D+vf6vmLX3sP8Z/q+Ytfew/2H+r5i197D/of6vmLX3sPw==","dtype":"float64","order":"little","shape":[200]}},"selected":{"id":"1174"},"selection_policy":{"id":"1173"}},"id":"1003","type":"ColumnDataSource"},{"attributes":{"args":{"source":{"id":"1003"}},"code":"function table_to_csv(source) {\\n    const columns = Object.keys(source.data)\\n    const nrows = source.get_length()\\n    const lines = [columns.join(&#x27;,&#x27;)]\\n\\n    for (let i = 0; i &lt; nrows; i++) {\\n        let row = [];\\n        for (let j = 0; j &lt; columns.length; j++) {\\n            const column = columns[j]\\n            row.push(source.data[column][i].toString())\\n        }\\n        lines.push(row.join(&#x27;,&#x27;))\\n    }\\n    return lines.join(&#x27;\\\\n&#x27;).concat(&#x27;\\\\n&#x27;)\\n}\\n\\n\\nconst filename = &#x27;data_result.csv&#x27;\\nconst filetext = table_to_csv(source)\\nconst blob = new Blob([filetext], { type: &#x27;text/csv;charset=utf-8;&#x27; })\\n\\n//addresses IE\\nif (navigator.msSaveBlob) {\\n    navigator.msSaveBlob(blob, filename)\\n} else {\\n    const link = document.createElement(&#x27;a&#x27;)\\n    link.href = URL.createObjectURL(blob)\\n    link.download = filename\\n    link.target = &#x27;_blank&#x27;\\n    link.style.visibility = &#x27;hidden&#x27;\\n    link.dispatchEvent(new MouseEvent(&#x27;click&#x27;))\\n}"},"id":"1155","type":"CustomJS"},{"attributes":{"button_type":"success","icon":null,"js_event_callbacks":{"button_click":[{"id":"1155"}]},"label":"Save (Lower Plot)","sizing_mode":"stretch_width"},"id":"1154","type":"Button"},{"attributes":{"args":{"source":{"id":"1002"}},"code":"function table_to_csv(source) {\\n    const columns = Object.keys(source.data)\\n    const nrows = source.get_length()\\n    const lines = [columns.join(&#x27;,&#x27;)]\\n\\n    for (let i = 0; i &lt; nrows; i++) {\\n        let row = [];\\n        for (let j = 0; j &lt; columns.length; j++) {\\n            const column = columns[j]\\n            row.push(source.data[column][i].toString())\\n        }\\n        lines.push(row.join(&#x27;,&#x27;))\\n    }\\n    return lines.join(&#x27;\\\\n&#x27;).concat(&#x27;\\\\n&#x27;)\\n}\\n\\n\\nconst filename = &#x27;data_result.csv&#x27;\\nconst filetext = table_to_csv(source)\\nconst blob = new Blob([filetext], { type: &#x27;text/csv;charset=utf-8;&#x27; })\\n\\n//addresses IE\\nif (navigator.msSaveBlob) {\\n    navigator.msSaveBlob(blob, filename)\\n} else {\\n    const link = document.createElement(&#x27;a&#x27;)\\n    link.href = URL.createObjectURL(blob)\\n    link.download = filename\\n    link.target = &#x27;_blank&#x27;\\n    link.style.visibility = &#x27;hidden&#x27;\\n    link.dispatchEvent(new MouseEvent(&#x27;click&#x27;))\\n}"},"id":"1153","type":"CustomJS"},{"attributes":{"button_type":"success","icon":null,"js_event_callbacks":{"button_click":[{"id":"1153"}]},"label":"Save (Upper Plot)","sizing_mode":"stretch_width"},"id":"1152","type":"Button"},{"attributes":{"data":{"xBTC":[0.1],"yBTC":[0]},"selected":{"id":"1074"},"selection_policy":{"id":"1073"}},"id":"1004","type":"ColumnDataSource"},{"attributes":{"data":{"x":{"__ndarray__":"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","dtype":"float64","order":"little","shape":[200]},"y":{"__ndarray__":"AAAAAAAA8D8AAAAAAADwPwAAAAAAAPA/AAAAAAAA8D9LR78s1f7vP5S0YxbU8u8/0rEphqPm7z+yqB/VQNrvP6P7a0ipze8/LJZ3EdrA7z+sCSVO0LPvP5ykFAmJpu8/p+z1OQGZ7z8s3+bFNYvvP8ZU4X8jfe8/Qd42Kcdu7z+WaRtyHWDvPwz2PvoiUe8/s5V2UdRB7z+j8XT4LTLvP/l8kmEsIu8/sXel8csR7z8P2ekACQHvP9Is+dvf7+4/B2TSxEze7j9zjfHzS8zuP5ddd5nZue4/VmFg3vGm7j8hqcvlkJPuP0atUM6yf+4/4h1ks1Nr7j/CQ8uub1buP4GIHdoCQe4/5q5TUAkr7j9jNWQvfxTuPx1P7Jlg/e0/5tDkuKnl7T/EYWK9Vs3tP8EwYOJjtO0/c2OUbs2a7T97Y022j4DtPwgkVx2nZe0/C2vnGBBK7T8/HpAxxy3tP1eHNgXJEO0/9HcOSRLz7D8AK5jLn9TsPyG3n3Zutew/cdw8UXuV7D+R79GBw3TsP/+bCFBEU+w/YTHLJvsw7D/SKDmW5Q3sP6GLlVUB6us/xd8tRUzF6z9zPDhwxJ/rP2Ynpw5oees/3NrxhjVS6z/BlM9vKyrrP9CR5JFIAes/Elpf6YvX6j+BCIWn9KzqP3E9KzSCgeo/O3EeLzRV6j+mZXNxCijqP+d8wg4F+uk/C8hLViTL6T9OqQLUaJvpP970f1HTauk/cYfZ1mQ56T9BWV6rHgfpP30kNlYC1Og/1cbjnhGg6D8ymKmNTmvoP2ADz2u7Neg/l8HGw1r/5z9RLjVhL8jnPyQ+1lA8kOc/yrlC4IRX5z/SdJSdDB7nP61O6VbX4+Y/yOTEGemo5j+781AyRm3mP3V+fCrzMOY/Zur5yPTz5T/pVxwQULblP3+XlDwKeOU/2jMOxCg55T98Ia1TsfnkP+q8bM6pueQ/KddgSxh55D8kqNkTAzjkP6iUa6Fw9uM/L8zbm2e04z/n1vLW7nHjP/hBNlANL+M/fKqKLMrr4j8ce7+1LKjiP/XABVg8ZOI/W41TnwAg4j9RabU0gdvhP+hsj9vFluE/nZrPbtZR4T8IKRPeugzhP7FvwCp7x+A/EzUXZR+C4D+NITmprzzgP3ZEWDho7t8/AxSx0Wlj3z9Kgwl6dNjeP0mzoIyYTd4/YZ9gXubC3T/8rtw3bjjdPynoWU9Artw/mVLkwmwk3D8PDXWSA5vbP1SKLJoUEts/O1WkjK+J2j9bqFvt4wHaP14OQgvBetk/7yNj+1X02D+nebaTsW7YP2N0Fmbi6dc/Hulgu/Zl1z+gD8SO/OLWP5tAOokBYdY/V842/RLg1T/aHobiPWDVP6wDY9KO4dQ/oSHDAxJk1D+6DtxH0+fTP8qe4gbebNM/z6oFPT3z0j9ccKV3+3rSP5B3yNIiBNI/mMDO9ryO0T9YyWMW0xrRP9/Or+xtqNA/GX/Iu5U30D9FQ8KWpJDPP30jdM9Vtc4/522ewUzdzT/m/IkTlgjNP9ZaJnE9N8w/+nXZi01pyz+Vcsca0J7KP0RdkNvN18k/rDaBk04UyT+5izURWVTIP8+Lpi7zl8c/H0+k0yHfxj9HxrX46CnGPxSUW6pLeMU/D+KxDEzKxD+oEG1f6x/EP7v7LAIqecM/jGUieQfWwj9z+wFygjbCP5tIQMmYmsE/GNaRj0cCwT8UoqoPi23APyQUcKi9uL8/GXIgXHudvj8ySSR1Q4m9P81BYtQIfLw/4y1ODr11uz8Q2pB4UHa6PzJ46Teyfbk/uPM+TtCLuD/Qoteol6C3PwnurS70u7Y/w7vYztDdtT/fnv6OFwa1P4wFy5mxNLQ/0eVcTYdpsz8Eq6ZJgKSyPwdxt36D5bE/r+vlOncssT9aptU4QXmwP6ZEn1qNl68/KWDPqdhHrj8Ud9ACLQOtPz5C/U1Syas/tf9E0g+aqj/cuGVOLHWpP3CXiBFuWqg/anY3E5tJpz+ooKMKeUKmP7NzNoXNRKU/kFtl/F1QpD/ZX8Pq72SjPwo2S+BIgqI/iYndlS6ooT9T3+//ZtagP1UvaWC4DKA/cPhTr9KVnj+WtnzpgSGdP+8EcokNvJs/IiJuwgVlmj89wBn8+xuZPw==","dtype":"float64","order":"little","shape":[200]},"ymax":{"__ndarray__":"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","dtype":"float64","order":"little","shape":[200]},"ymin":{"__ndarray__":"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","dtype":"float64","order":"little","shape":[200]}},"selected":{"id":"1072"},"selection_policy":{"id":"1071"}},"id":"1002","type":"ColumnDataSource"},{"attributes":{"below":[{"id":"1014"}],"center":[{"id":"1017"},{"id":"1021"}],"js_event_callbacks":{"pan":[{"id":"1151"}],"tap":[{"id":"1151"}]},"left":[{"id":"1018"}],"min_height":400,"renderers":[{"id":"1040"},{"id":"1046"},{"id":"1052"},{"id":"1059"}],"sizing_mode":"stretch_both","title":{"id":"1063"},"toolbar":{"id":"1029"},"x_range":{"id":"1006"},"x_scale":{"id":"1010"},"y_range":{"id":"1054"},"y_scale":{"id":"1012"}},"id":"1005","subtype":"Figure","type":"Plot"},{"attributes":{"children":[{"id":"1146"},{"id":"1147"},{"id":"1119"},{"id":"1123"},{"id":"1125"},{"id":"1129"},{"id":"1127"},{"id":"1131"},{"id":"1133"},{"id":"1121"},{"id":"1152"},{"id":"1154"}],"sizing_mode":"stretch_width"},"id":"1156","type":"Column"},{"attributes":{"children":[{"id":"1148"},{"id":"1135"},{"id":"1137"},{"id":"1139"},{"id":"1141"},{"id":"1143"},{"id":"1145"},{"id":"1149"}],"sizing_mode":"stretch_width"},"id":"1157","type":"Column"},{"attributes":{},"id":"1010","type":"LinearScale"},{"attributes":{},"id":"1174","type":"Selection"},{"attributes":{},"id":"1173","type":"UnionRenderers"},{"attributes":{},"id":"1006","type":"DataRange1d"},{"attributes":{"axis_label":"x [m]","axis_label_text_font_size":"17pt","coordinates":null,"formatter":{"id":"1069"},"group":null,"major_label_policy":{"id":"1070"},"major_label_text_font_size":"12pt","ticker":{"id":"1015"}},"id":"1014","type":"LinearAxis"},{"attributes":{},"id":"1012","type":"LinearScale"},{"attributes":{},"id":"1015","type":"BasicTicker"},{"attributes":{"axis":{"id":"1014"},"coordinates":null,"group":null,"ticker":null},"id":"1017","type":"Grid"},{"attributes":{},"id":"1023","type":"WheelZoomTool"},{"attributes":{"axis_label":"Pore Volume","axis_label_text_font_size":"17pt","coordinates":null,"formatter":{"id":"1180"},"group":null,"major_label_policy":{"id":"1181"},"major_label_text_font_size":"12pt","ticker":{"id":"1087"}},"id":"1086","type":"LinearAxis"},{"attributes":{"axis_label":"c(t)/c0","axis_label_text_font_size":"17pt","coordinates":null,"formatter":{"id":"1066"},"group":null,"major_label_policy":{"id":"1067"},"major_label_text_font_size":"12pt","ticker":{"id":"1019"}},"id":"1018","type":"LinearAxis"},{"attributes":{"axis":{"id":"1018"},"coordinates":null,"dimension":1,"group":null,"ticker":null},"id":"1021","type":"Grid"},{"attributes":{"line_alpha":0.1,"line_color":"red","line_width":3,"x":{"field":"x2"},"y":{"field":"y2"}},"id":"1110","type":"Line"},{"attributes":{},"id":"1019","type":"BasicTicker"},{"attributes":{"code":"return (Math.exp(tick)).toFixed(4)+&#x27; [PV]&#x27;"},"id":"1118","type":"FuncTickFormatter"},{"attributes":{},"id":"1082","type":"LinearScale"},{"attributes":{},"id":"1027","type":"HelpTool"},{"attributes":{"end":7},"id":"1115","type":"Range1d"},{"attributes":{},"id":"1022","type":"PanTool"},{"attributes":{},"id":"1084","type":"LinearScale"},{"attributes":{"overlay":{"id":"1028"}},"id":"1024","type":"BoxZoomTool"},{"attributes":{},"id":"1025","type":"SaveTool"},{"attributes":{},"id":"1087","type":"BasicTicker"},{"attributes":{},"id":"1026","type":"ResetTool"},{"attributes":{"axis":{"id":"1086"},"coordinates":null,"group":null,"ticker":null},"id":"1089","type":"Grid"},{"attributes":{},"id":"1095","type":"WheelZoomTool"},{"attributes":{"axis_label":"c(t)/c0","axis_label_text_font_size":"17pt","coordinates":null,"formatter":{"id":"1177"},"group":null,"major_label_policy":{"id":"1178"},"major_label_text_font_size":"12pt","ticker":{"id":"1091"}},"id":"1090","type":"LinearAxis"},{"attributes":{"axis":{"id":"1090"},"coordinates":null,"dimension":1,"group":null,"ticker":null},"id":"1093","type":"Grid"},{"attributes":{},"id":"1091","type":"BasicTicker"},{"attributes":{},"id":"1097","type":"SaveTool"},{"attributes":{"line_alpha":0.6,"line_color":"red","line_width":3,"x":{"field":"x"},"y":{"field":"y"}},"id":"1037","type":"Line"},{"attributes":{},"id":"1098","type":"ResetTool"},{"attributes":{},"id":"1094","type":"PanTool"},{"attributes":{"overlay":{"id":"1100"}},"id":"1096","type":"BoxZoomTool"},{"attributes":{},"id":"1099","type":"HelpTool"},{"attributes":{"bottom_units":"screen","coordinates":null,"fill_alpha":0.5,"fill_color":"lightgrey","group":null,"left_units":"screen","level":"overlay","line_alpha":1.0,"line_color":"black","line_dash":[4,4],"line_width":2,"right_units":"screen","syncable":false,"top_units":"screen"},"id":"1100","type":"BoxAnnotation"},{"attributes":{"source":{"id":"1003"}},"id":"1113","type":"CDSView"},{"attributes":{"coordinates":null,"data_source":{"id":"1002"},"glyph":{"id":"1037"},"group":null,"hover_glyph":null,"muted_glyph":{"id":"1039"},"nonselection_glyph":{"id":"1038"},"view":{"id":"1041"}},"id":"1040","type":"GlyphRenderer"},{"attributes":{"args":{"BTCp":{"id":"1077"},"Fr_n_sl":{"id":"1145"},"K_Fr_sl":{"id":"1143"},"Kads_sl":{"id":"1139"},"Kd_sl":{"id":"1137"},"col_len_sl":{"id":"1123"},"col_rad_sl":{"id":"1125"},"computebutton":{"id":"1149"},"disp_sl":{"id":"1127"},"flow_sl":{"id":"1131"},"pore_vol_sl":{"id":"1119"},"poros_sl":{"id":"1133"},"pulse_inj_sl":{"id":"1121"},"reac_sl":{"id":"1129"},"rg_CP":{"id":"1147"},"rg_ST":{"id":"1148"},"rho_s_sl":{"id":"1135"},"s_max_sl":{"id":"1141"},"source1":{"id":"1002"},"source2":{"id":"1003"},"source3":{"id":"1004"}},"code":"function transport_num_CN(c_arr,Disp, sep_vel, dx_CN, dt_CN, nX, c_in, A_cn, b_cn){\\n  // Coefficients\\n  var p1 = Disp*dt_CN/dx_CN**2\\n  var p2 = sep_vel*dt_CN/(4*dx_CN)\\n  var p3 = sep_vel*dx_CN/Disp\\n\\n  for (let i = 0; i &lt; nX; i++) {\\n    // Left hand side matrix A_CN\\n    if (i &gt; 0 &amp;&amp; i &lt; nX-1) { // internal cells\\n      A_cn[i][i-1]  = -p1/2-p2\\n      A_cn[i][i]    = 1+p1\\n      A_cn[i][i+1]  = -p1/2+p2\\n    } else if (i == 0) { // inflow cell\\n      A_cn[i][i]    = p1*p3 + 2*p2*p3 + 1 + p1\\n      A_cn[i][i+1]  = -p1\\n    } else if (i == nX-1) { // outflow cell\\n      A_cn[i][i-1]  = -p1 - p1*p3 - 2*p2*p3\\n      A_cn[i][i]    = 1 + p1 + p1*p3 - 2*p2*p3\\n    }\\n    // Right hand side vector --&gt; produces NaNs atm after 4 entries\\n    if (i &gt; 0 &amp;&amp; i &lt; nX-1 &amp;&amp; 1==1) { // internal cells\\n      b_cn[i]   = (p1/2+p2)*c_arr[i-1] + (1-p1)*c_arr[i] + (p1/2-p2)*c_arr[i+1]\\n    } else if (i == 0) { // inflow cell\\n      b_cn[i]    = (-p1*p3 - 2*p2*p3 + 1 - p1)*c_arr[i] + p1*c_arr[i+1] + 2*(p1*p3 + 2*p2*p3)* c_in\\n    } else if (i == nX-1) { // outflow cell\\n      b_cn[i]    = (p1 + p1*p3 - 2*p2*p3)*c_arr[i-1] + (1 - p1 - p1*p3 + 2*p2*p3) *c_arr[i]\\n    }\\n  }\\n  const res = math.lusolve(A_cn,b_cn)\\n  return res\\n\\n}\\n\\nfunction total_conc(c,rg_SType,sorbed,rho_s,poros,K_Fr,Fr_n) {\\n  // This function sums up the concentration in the aqueous and solid phase per cell\\n  var c_tot = Array(c.length).fill(0)\\n  if (rg_SType == 2) {\\n    for (let i = 0; i &lt; c.length; i++) {\\n      c_tot[i] = (rho_s*(1-poros)*K_Fr*c[i]**(Fr_n-1)+ poros)*c[i]\\n    }\\n  } else {\\n    for (let i = 0; i &lt; c.length; i++) {\\n      c_tot[i] = sorbed[i]*rho_s*(1-poros) + poros*c[i]\\n    }\\n  }\\n  return c_tot\\n}\\n\\ncomputebutton.label = \\"Please Wait\\"\\n\\n// Extracting data sources\\nvar x   = source1.data[&#x27;x&#x27;] \\nvar y   = source1.data[&#x27;y&#x27;]\\nvar ymin= source1.data[&#x27;ymin&#x27;]\\nvar ymax= source1.data[&#x27;ymax&#x27;]\\nvar x2  = source2.data[&#x27;x2&#x27;]\\nvar y2  = source2.data[&#x27;y2&#x27;]\\nvar x3  = source3.data[&#x27;xBTC&#x27;]\\nvar y3  = source3.data[&#x27;yBTC&#x27;]\\n\\nvar rg_CP     = rg_CP.active                      // [0]\\nvar rg_SType  = rg_ST.active                      // [0]\\n\\n// Values needed for all models\\nconst col_len   = col_len_sl.value;                 // [m]\\nconst rad       = col_rad_sl.value;                 // [m]\\nconst reac_l    = Math.exp(reac_sl.value[0])/3600;  // [1/s]\\nconst reac_h    = Math.exp(reac_sl.value[1])/3600;  // [1/s]\\nconst disp_l    = Math.exp(disp_sl.value[0])/3600;  // [m2/s]\\nconst disp_h    = Math.exp(disp_sl.value[1])/3600;  // [m2/s]\\nconst Q         = flow_sl.value/1000/1000/3600;     // [m3/s]\\nconst poros     = poros_sl.value;                   // [-]\\nconst t_inj     = pulse_inj_sl.value                // [s]\\nvar xBTC        = x3[0];                            // [m]\\nconst rho_s     = rho_s_sl.value                    // [kg/m3]\\nconst Kd        = Kd_sl.value                       // [m3/kg]\\nconst K_ads     = Kads_sl.value                     // [mol/m3]\\nconst s_max     = s_max_sl.value                    // [mol/kg]\\nconst K_Fr      = K_Fr_sl.value                     // [mmol^(1-n)*L^(n) / kg]\\nconst Fr_n      = Fr_n_sl.value                     // [-]\\n\\n// Derived entities\\nconst A       = math.PI * rad**2;             // [m2]\\nconst vel     = Q/A;                          // [m/s]\\nconst sep_vel = vel / poros                   // [m/s]\\nconst reac    = (reac_l + reac_h)/2           // [1/s] \\nconst Dis     = (disp_l + disp_h)/2           // [m2/s]  \\nconst PS      = col_len * A * poros           // [m3]\\nconst PV      = col_len/sep_vel               // [s] VEL oder SEP_VEL?\\nconst c0      = 1;                            // [-] \\nconst nX      = x.length                      // [-]\\nconst dx_CN   = col_len/nX                    // [m]\\nconst dt_CN   = dx_CN / sep_vel               // [s]\\nconst t_end   = PV * (x2[x2.length-1])        // [s]\\nconst nT      = t_end/dt_CN                   // [-]\\n\\n// Time span list\\nvar tsp = []\\n\\n// Discretize space (upper plot) and time (lower plot)\\nfor (let j = 0; j &lt; x.length; j++) {\\n  x[j] = -0.02*col_len + 1.02*col_len/x.length * j;\\n}\\nfor (let j = 0; j &lt; x2.length; j++) {\\n  tsp[j] = x2[j] * PV;\\n}\\n\\n// Initialize lists\\nvar c_array     = Array(nX).fill(0)\\nvar s_array     = Array(nX).fill(0)\\nvar c_tot_array = Array(nT).fill(0)\\nvar s_tot_array = Array(nT).fill(0)\\n// Creating multi-dimensional arrays\\nfor (let i = 0; i &lt; nT; i++) {\\n  c_tot_array[i] = new Array(nX).fill(0)\\n  s_tot_array[i] = new Array(nX).fill(0)\\n}\\nvar A_CN        = Array(nX).fill(0)\\nvar B_CN        = Array(nX).fill(0)\\nfor (let i = 0; i &lt; nX; i++) {\\n  A_CN[i] = new Array(nX).fill(0)\\n}\\n\\n\\nconsole.log(\\"Crank - Nicholson: \\\\n\\"\\n              +\\"Spatial Discretization is \\" + dx_CN + \\" m\\\\n\\"\\n              +\\"Temporal Discretization is \\" + dt_CN + \\" s\\\\n\\" \\n              +\\"Seepage velocity is \\"+ sep_vel + \\"m/s\\\\n\\"\\n              +\\"Dispersion Coefficient is \\"+ Dis + \\"m2/s\\\\n\\"\\n              +\\"There are \\" + nX + \\" spatial nodes\\\\n\\"\\n              +\\"There are \\" + t_end/dt_CN + \\" temporal nodes\\\\n\\"\\n              +\\"The Courant Number equals \\" + dt_CN * sep_vel /dx_CN\\n  )\\n\\n\\nfor (let i = 0; i &lt; nT; i++) {  //needs to be nT\\n  // Set inlet concentration \\n  if (rg_CP == 0) {\\n      var c_in = c0\\n  } else if (rg_CP == 1 &amp;&amp; t_num[i] &lt; t_inj) {\\n      var c_in = c0\\n  } else {\\n      var c_in = 0\\n  }\\n\\n  // Transport\\n  // Transport with Crank Nicholson scheme\\n  var c_array = transport_num_CN(c_array,Dis,sep_vel,dx_CN,dt_CN,nX,c_in,A_CN,B_CN)\\n\\n  // Sorption\\n  if (1 ==2) {\\n  if (rg_SType == 0) { // Linear Sorption\\n      var c_tot_lin = total_conc(c_array,rg_SType,s_array,rho_s,poros)\\n      \\n      for (let j = 0; j &lt; c_array.length; j++) {\\n        c_array[j] = c_tot_lin[j]/(Kd*(1-poros)*rho_s+poros)\\n        s_array[j] = c_array[j]*Kd\\n      }\\n\\n  } else if (rg_SType == 1) { // Langmuir Sorption\\n      var c_tot_lang = total_conc(c_array,rg_SType,s_array,rho_s,poros)\\n\\n      for (let j = 0; j &lt; c_array.length; j++) {\\n        var beta_lang  = (1-poros)*rho_s*s_max + poros*K_ads - c_tot_lang[j]\\n        var gamma_lang = -c_tot_lang[j]*K_ads\\n\\n        c_array[j] = (-beta_lang + math.sqrt(beta_lang**2 - 4*poros*gamma_lang))/(2*poros)\\n        s_array[j] = s_max*c_array[j]/(K_ads+c_array[j]) //[mol/kg]\\n      }\\n\\n  } else if (rg_SType == 2) { // Freundlich Sorption\\n      var c_tot_Fr = total_conc(c_array,rg_SType,s_array,rho_s,poros,K_Fr,Fr_n)\\n      \\n      for (let j = 0; j &lt; c_array.length; j++) {\\n        // Picard Iteration: Guess that everything is in the aqueous phase\\n        var c_old = c_tot_Fr[j]/poros\\n        // Loop until convergence criterion is met\\n        while (math.abs(c_old-c_array[j])&gt;1e-9) {\\n          c_old = c_array[j]\\n          c_array[j] = c_tot_Fr[j]/(rho_s*(1-poros)*K_Fr*c_array[j]**(Fr_n-1)+poros)\\n        }\\n        s_array[j] = K_Fr * c_array[j]**Fr_n //[mmol/kg] --&gt; different from other sorption types\\n      }\\n  }}\\n\\n  // Store results\\n  for (let j = 0; j &lt; c_array.length; j++) {\\n    c_tot_array[i][j] = c_array[j][0]\\n    s_tot_array[i][j] = s_array[j][0]\\n  }\\n}\\n\\ncomputebutton.label = \\"Hello\\"\\nconsole.log(c_tot_array)\\n"},"id":"1150","type":"CustomJS"},{"attributes":{"line_alpha":0.2,"line_color":"red","line_width":3,"x":{"field":"x2"},"y":{"field":"y2"}},"id":"1111","type":"Line"},{"attributes":{"bottom_units":"screen","coordinates":null,"fill_alpha":0.5,"fill_color":"lightgrey","group":null,"left_units":"screen","level":"overlay","line_alpha":1.0,"line_color":"black","line_dash":[4,4],"line_width":2,"right_units":"screen","syncable":false,"top_units":"screen"},"id":"1028","type":"BoxAnnotation"},{"attributes":{},"id":"1066","type":"BasicTickFormatter"},{"attributes":{"line_alpha":0.1,"line_color":"red","line_width":3,"x":{"field":"x"},"y":{"field":"y"}},"id":"1038","type":"Line"},{"attributes":{},"id":"1070","type":"AllLabels"},{"attributes":{"active_multi":{"id":"1061"},"tools":[{"id":"1022"},{"id":"1023"},{"id":"1024"},{"id":"1025"},{"id":"1026"},{"id":"1027"},{"id":"1061"}]},"id":"1029","type":"Toolbar"},{"attributes":{"source":{"id":"1002"}},"id":"1041","type":"CDSView"},{"attributes":{"line_alpha":0.2,"line_color":"red","line_width":3,"x":{"field":"x"},"y":{"field":"y"}},"id":"1039","type":"Line"},{"attributes":{"tools":[{"id":"1094"},{"id":"1095"},{"id":"1096"},{"id":"1097"},{"id":"1098"},{"id":"1099"}]},"id":"1101","type":"Toolbar"},{"attributes":{"line_alpha":0.1,"line_dash":[6],"line_width":3,"x":{"field":"x"},"y":{"field":"ymin"}},"id":"1044","type":"Line"},{"attributes":{"line_alpha":0.6,"line_dash":[6],"line_width":3,"x":{"field":"x"},"y":{"field":"ymin"}},"id":"1043","type":"Line"},{"attributes":{"coordinates":null,"data_source":{"id":"1003"},"glyph":{"id":"1109"},"group":null,"hover_glyph":null,"muted_glyph":{"id":"1111"},"nonselection_glyph":{"id":"1110"},"view":{"id":"1113"}},"id":"1112","type":"GlyphRenderer"},{"attributes":{},"id":"1177","type":"BasicTickFormatter"},{"attributes":{"code":"return tick.toFixed(3)+&#x27; [m]&#x27;"},"id":"1122","type":"FuncTickFormatter"},{"attributes":{"end":1.05},"id":"1114","type":"Range1d"},{"attributes":{},"id":"1071","type":"UnionRenderers"},{"attributes":{},"id":"1178","type":"AllLabels"},{"attributes":{"coordinates":null,"data_source":{"id":"1002"},"glyph":{"id":"1043"},"group":null,"hover_glyph":null,"muted_glyph":{"id":"1045"},"nonselection_glyph":{"id":"1044"},"view":{"id":"1047"}},"id":"1046","type":"GlyphRenderer"},{"attributes":{"line_alpha":0.1,"line_dash":[6],"line_width":3,"x":{"field":"x"},"y":{"field":"ymax"}},"id":"1050","type":"Line"},{"attributes":{"button_type":"success","icon":null,"js_event_callbacks":{"button_click":[{"id":"1150"}]},"label":"Compute Numerical Model","sizing_mode":"stretch_width","visible":false},"id":"1149","type":"Button"},{"attributes":{},"id":"1072","type":"Selection"},{"attributes":{"line_alpha":0.2,"line_dash":[6],"line_width":3,"x":{"field":"x"},"y":{"field":"ymin"}},"id":"1045","type":"Line"},{"attributes":{"coordinates":null,"group":null,"text":"Breakthrough Curve at x = 0.100 m (Drag diamond in upper plot to change)","text_font_size":"13pt"},"id":"1116","type":"Title"},{"attributes":{},"id":"1069","type":"BasicTickFormatter"},{"attributes":{"code":"return tick.toFixed(3)+&#x27; [m]&#x27;"},"id":"1124","type":"FuncTickFormatter"},{"attributes":{},"id":"1180","type":"BasicTickFormatter"},{"attributes":{"source":{"id":"1002"}},"id":"1047","type":"CDSView"},{"attributes":{"end":1.9459101490553132,"format":{"id":"1118"},"js_property_callbacks":{"change:value":[{"id":"1151"}]},"sizing_mode":"stretch_width","start":-6.907755278982137,"step":0.008853665428037451,"title":"Pore Volume (1PV = 78.54 h)","value":-0.6931471805599453},"id":"1119","type":"Slider"},{"attributes":{"line_alpha":0.6,"line_dash":[6],"line_width":3,"x":{"field":"x"},"y":{"field":"ymax"}},"id":"1049","type":"Line"},{"attributes":{},"id":"1181","type":"AllLabels"},{"attributes":{"end":43200,"format":{"id":"1120"},"js_property_callbacks":{"change:value":[{"id":"1151"}]},"sizing_mode":"stretch_width","start":30,"step":30,"title":"Duration of Injection","value":18000,"visible":false},"id":"1121","type":"Slider"},{"attributes":{"active":0,"js_property_callbacks":{"change:active":[{"id":"1151"}]},"labels":["Continuous Injection","Pulse Injection"],"sizing_mode":"stretch_width"},"id":"1147","type":"RadioButtonGroup"},{"attributes":{"source":{"id":"1002"}},"id":"1053","type":"CDSView"},{"attributes":{"end":1.05,"start":-0.03},"id":"1054","type":"Range1d"},{"attributes":{"end":0.5,"format":{"id":"1122"},"js_property_callbacks":{"change:value":[{"id":"1151"}]},"sizing_mode":"stretch_width","start":0.01,"step":0.001,"title":"Column length","value":0.2},"id":"1123","type":"Slider"},{"attributes":{"source":{"id":"1004"}},"id":"1060","type":"CDSView"},{"attributes":{"code":"return Math.exp(tick).toExponential(1).toString()+&#x27; [m2/h]&#x27;"},"id":"1126","type":"FuncTickFormatter"},{"attributes":{"end":0.2,"format":{"id":"1124"},"js_property_callbacks":{"change:value":[{"id":"1151"}]},"sizing_mode":"stretch_width","start":0.005,"step":0.0001,"title":"Column radius","value":0.05},"id":"1125","type":"Slider"},{"attributes":{"num_objects":1,"renderers":[{"id":"1059"}]},"id":"1061","type":"PointDrawTool"},{"attributes":{"fill_alpha":{"value":0.6},"fill_color":{"value":"black"},"marker":{"value":"diamond"},"size":{"value":18},"x":{"field":"xBTC"},"y":{"field":"yBTC"}},"id":"1056","type":"Scatter"},{"attributes":{"code":"return Math.exp(tick).toExponential(1).toString()+&#x27; [1/h]&#x27;"},"id":"1128","type":"FuncTickFormatter"},{"attributes":{"coordinates":null,"data_source":{"id":"1002"},"glyph":{"id":"1049"},"group":null,"hover_glyph":null,"muted_glyph":{"id":"1051"},"nonselection_glyph":{"id":"1050"},"view":{"id":"1053"}},"id":"1052","type":"GlyphRenderer"},{"attributes":{"line_alpha":0.2,"line_dash":[6],"line_width":3,"x":{"field":"x"},"y":{"field":"ymax"}},"id":"1051","type":"Line"},{"attributes":{"end":-2.3025850929940455,"format":{"id":"1126"},"js_property_callbacks":{"change:value":[{"id":"1151"}]},"sizing_mode":"stretch_width","start":-13.815510557964274,"step":0.038376418216567426,"title":"Dispersion coefficient ","value":[-11.512925464970229,-9.903487552536127]},"id":"1127","type":"RangeSlider"},{"attributes":{"code":"return tick.toFixed(1)+&#x27; [mL/h]&#x27;"},"id":"1130","type":"FuncTickFormatter"},{"attributes":{"end":0.0,"format":{"id":"1128"},"js_property_callbacks":{"change:value":[{"id":"1151"}]},"sizing_mode":"stretch_width","start":-9.210340371976182,"step":0.03070113457325394,"title":"Reaction coefficient ","value":[-6.907755278982137,-5.298317366548036]},"id":"1129","type":"RangeSlider"},{"attributes":{"code":"return tick.toFixed(2)+&#x27; [-]&#x27;"},"id":"1132","type":"FuncTickFormatter"},{"attributes":{"end":50,"format":{"id":"1130"},"js_property_callbacks":{"change:value":[{"id":"1151"}]},"sizing_mode":"stretch_width","start":1,"step":0.1,"title":"Flow Rate","value":10},"id":"1131","type":"Slider"},{"attributes":{"active":0,"js_property_callbacks":{"change:active":[{"id":"1151"}]},"labels":["Linear Sorption","Langmuir Sorption","Freundlich Sorption"],"sizing_mode":"stretch_width","visible":false},"id":"1148","type":"RadioButtonGroup"},{"attributes":{"active":0,"js_property_callbacks":{"change:active":[{"id":"1151"}]},"labels":["Analytical Model","Numerical Model"],"sizing_mode":"stretch_width"},"id":"1146","type":"RadioButtonGroup"},{"attributes":{"end":10,"format":{"id":"1142"},"sizing_mode":"stretch_width","start":0.01,"step":0.01,"title":"Freundlich Sorption Parameter","value":1,"visible":false},"id":"1143","type":"Slider"},{"attributes":{"end":2,"format":{"id":"1144"},"sizing_mode":"stretch_width","start":1,"step":0.01,"title":"Freundlich n","value":1.3,"visible":false},"id":"1145","type":"Slider"},{"attributes":{"coordinates":null,"group":null},"id":"1063","type":"Title"},{"attributes":{"code":"return tick.toFixed(2)+&#x27; [L/kg]&#x27;"},"id":"1144","type":"FuncTickFormatter"},{"attributes":{"end":1,"format":{"id":"1140"},"sizing_mode":"stretch_width","start":0.0001,"step":0.0001,"title":"Specific Sorption Capacity","value":0.1,"visible":false},"id":"1141","type":"Slider"},{"attributes":{"below":[{"id":"1086"}],"center":[{"id":"1089"},{"id":"1093"}],"left":[{"id":"1090"}],"min_height":400,"renderers":[{"id":"1112"}],"sizing_mode":"stretch_both","title":{"id":"1116"},"toolbar":{"id":"1101"},"x_range":{"id":"1115"},"x_scale":{"id":"1082"},"y_range":{"id":"1114"},"y_scale":{"id":"1084"}},"id":"1077","subtype":"Figure","type":"Plot"},{"attributes":{"code":"return (tick*1000).toFixed(1)+&#x27; [mmol/L]&#x27;"},"id":"1140","type":"FuncTickFormatter"},{"attributes":{"end":0.005,"format":{"id":"1136"},"sizing_mode":"stretch_width","start":5e-05,"step":5e-05,"title":"Linear Partinioning Coefficient","value":0.002,"visible":false},"id":"1137","type":"Slider"},{"attributes":{"code":"return tick.toFixed(2)+&#x27; [mmol^(1-n)*L^(n) / kg]&#x27;"},"id":"1142","type":"FuncTickFormatter"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"black"},"hatch_alpha":{"value":0.1},"line_alpha":{"value":0.1},"marker":{"value":"diamond"},"size":{"value":18},"x":{"field":"xBTC"},"y":{"field":"yBTC"}},"id":"1057","type":"Scatter"},{"attributes":{"end":10,"format":{"id":"1138"},"sizing_mode":"stretch_width","start":0.01,"step":0.01,"title":"Half Saturation Concentration","value":1,"visible":false},"id":"1139","type":"Slider"},{"attributes":{},"id":"1067","type":"AllLabels"},{"attributes":{},"id":"1073","type":"UnionRenderers"},{"attributes":{"coordinates":null,"data_source":{"id":"1004"},"glyph":{"id":"1056"},"group":null,"hover_glyph":null,"muted_glyph":{"id":"1058"},"nonselection_glyph":{"id":"1057"},"view":{"id":"1060"}},"id":"1059","type":"GlyphRenderer"},{"attributes":{},"id":"1074","type":"Selection"},{"attributes":{"code":"return (tick).toFixed(2)+&#x27; [mmol/L]&#x27;"},"id":"1138","type":"FuncTickFormatter"},{"attributes":{"fill_alpha":{"value":0.2},"fill_color":{"value":"black"},"hatch_alpha":{"value":0.2},"line_alpha":{"value":0.2},"marker":{"value":"diamond"},"size":{"value":18},"x":{"field":"xBTC"},"y":{"field":"yBTC"}},"id":"1058","type":"Scatter"},{"attributes":{"code":"return (tick/1000).toFixed(2)+&#x27; [kg/L]&#x27;"},"id":"1134","type":"FuncTickFormatter"},{"attributes":{"code":"return (tick/60).toFixed(1)+&#x27; [min]&#x27;"},"id":"1120","type":"FuncTickFormatter"},{"attributes":{"line_alpha":0.6,"line_color":"red","line_width":3,"x":{"field":"x2"},"y":{"field":"y2"}},"id":"1109","type":"Line"},{"attributes":{"end":3000,"format":{"id":"1134"},"sizing_mode":"stretch_width","start":2000,"title":"Solid Density","value":2650,"visible":false},"id":"1135","type":"Slider"},{"attributes":{"code":"return (tick*1000).toFixed(2)+&#x27; [L/kg]&#x27;"},"id":"1136","type":"FuncTickFormatter"},{"attributes":{"end":1,"format":{"id":"1132"},"js_property_callbacks":{"change:value":[{"id":"1151"}]},"sizing_mode":"stretch_width","start":0.01,"step":0.01,"title":"Porosity","value":0.5},"id":"1133","type":"Slider"}],"root_ids":["1005","1156","1077","1157"]},"title":"Bokeh Application","version":"2.4.1"}}';
                const render_items = [{"docid":"b7fcd423-4c0a-4fee-abc0-82de3eacd5e6","root_ids":["1005","1156","1077","1157"],"roots":{"1005":"3566dbef-272e-4251-b1cc-9253e353d8d6","1077":"f342f892-0d56-47be-b6d4-69f80200e0d3","1156":"2ec37fe9-9a0d-479e-a8ff-5aed3aec4588","1157":"e7420acb-42a5-44db-98c3-b153961b4189"}}];
                root.Bokeh.embed.embed_items(docs_json, render_items);
              
                }
                if (root.Bokeh !== undefined) {
                  embed_document(root);
                } else {
                  let attempts = 0;
                  const timer = setInterval(function(root) {
                    if (root.Bokeh !== undefined) {
                      clearInterval(timer);
                      embed_document(root);
                    } else {
                      attempts++;
                      if (attempts > 100) {
                        clearInterval(timer);
                        console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing");
                      }
                    }
                  }, 10, root)
                }
              })(window);
            });
          };
          if (document.readyState != "loading") fn();
          else document.addEventListener("DOMContentLoaded", fn);
        })();